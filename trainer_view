import React from 'react';
import { StyleSheet, Text, View, FlatList } from 'react-native';
import Ionicons from 'react-native-vector-icons/Ionicons';
import {
  createBottomTabNavigator,
  createStackNavigator,
} from 'react-navigation';


componentDidMount(){
	var myHeaders = new Headers({"Content-Type": "application/json"});
  var url = 'http://cs-ithaca.eastus.cloudapp.azure.com/~barr/getNames.php'

  var data={firstname: };
  fetch(url, {
    method: 'GET', // or 'PUT'
    body: JSON.stringify(data), // data can be `string` or {object}!
    headers: myHeaders
  }).then(res => res.json())
  .then(responseJson => { this.setState({
     isLoading: false,
     dataSource: responseJson,
    });
      })
  .catch(error => Alert.alert('Error:'+ error));
  }



export default class App extends React.Component {
	
constructor(props){
    super(props);
    this.state = {};
  }
 updateState = event => {
 this.setState({
 }); }

  render() {
    return (
	<View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
	</View>
    );
  }
}

class Sessions extends React.Component {
  render() {
    return (
      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
        <Button
          title="Go Home"
          onPress={() => this.props.navigation.navigate('SessionHome')}
        />
      </View>
    );
  }
}
class SessionHome extends React.Component {
  render() {
    return (
      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
        <Button
          title="Go Back"
          onPress={() => this.props.navigation.goBack()}
        />
      </View>
    );
  }
}
class PastSessions extends React.Component {
  render() {
    return (
      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
        <Button
          title="Go Back"
          onPress={() => this.props.navigation.goBack()}
        />
      </View>
    );
  }
}

class Clients extends React.Component {
	
  constructor(props){
    super(props);
    this.state ={}
  }

  render() {
    return (
      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
        <Button
          title="Go to Client List"
          onPress={() => this.props.navigation.navigate('ClientList')}
        />
		<Button
          title="Go Home"
          onPress={() => this.props.navigation.navigate('SessionHome')}
        />
		<Button
          title="Go Home"
          onPress={() => this.props.navigation.navigate('SessionHome')}
        />
		<Button
          title="Go Home"
          onPress={() => this.props.navigation.navigate('SessionHome')}
        />
      </View>
    );
  }
}

class ClientList extends React.Component {
  render() {
    return (
      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
        <Button
          title="Go Back"
          onPress={() => this.props.navigation.goBack()}
        />
      </View>
    );
  }
}

class ClientInfo extends React.Component {
  render() {
    return (
      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
        <Button
          title="Go Back"
          onPress={() => this.props.navigation.goBack()}
        />
      </View>
    );
  }
}

class PastClientSessions extends React.Component {
  render() {
    return (
      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
        <Button
          title="Go Back"
          onPress={() => this.props.navigation.goBack()}
        />
      </View>
    );
  }
}

class EditSessions extends React.Component {
  render() {
    return (
      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
        <Button
          title="Go Back"
          onPress={() => this.props.navigation.goBack()}
        />
      </View>
    );
  }
}


const SessionStack = createStackNavigator({
  SessionStart: Sessions,
  Home:SessionHome,
  Past:PastSessions,
});

const ClientStack = createStackNavigator({
  ClientStart: Clients,
  ClientList:ClientList
ClientInfo:ClientInfo,
PastCSessions:PastClientSessions
Edit::EditSessions

});

export default createBottomTabNavigator(
  {
    Sessions: SessionStack,
    Clients: ClientStack,
  },
  {
       navigationOptions: ({ navigation }) => ({
      tabBarIcon: ({ focused, horizontal, tintColor }) => {
        const { routeName } = navigation.state;
        let iconName;
        if (routeName === 'SessionStack') {
          iconName = `ios-information-circle${focused ? '' : '-outline'}`;
        } else if (routeName === 'ClientStack') {
          iconName = `ios-options${focused ? '' : '-outline'}`;
        }

        // You can return any component that you like here! We usually use an
        // icon component from react-native-vector-icons
        return <Ionicons name={iconName} size={horizontal ? 20 : 25} color={tintColor} />;
      },
    }),
    tabBarOptions: {
      activeTintColor: 'tomato',
      inactiveTintColor: 'gray',
    },
  }
);

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
});
